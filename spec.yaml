openapi: "3.0.0"
info:
  version: 1.0.0
  title: Find a Conference
  description: API for Find a Conference's conference database. 
  termsOfService: http://swagger.io/terms/
  contact:
    name: Coast to Coast Code Co
    url: http://github.com/c2c3
  license:
    name: MIT
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://petstore.swagger.io/v2
paths:
  /conferences:
    get:
      description: |
        Returns all conferences
      operationId: findConferences
      parameters:
        - name: tags
          in: query
          description: tags to filter by
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: conference response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Conference'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new conference in the database
      operationId: addConference
      security:
        - BearerAuth: []
      requestBody:
        description: Conference to add to the database
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewConference'
      responses:
        '200':
          description: conference response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conference'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /conference/{id}:
    get:
      description: Returns a specific conference based on a single ID
      operationId: find conference by ID
      parameters:
        - name: id
          in: path
          description: ID of conference to fetch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: conference response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conference'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: deletes a single conference based on the ID supplied
      operationId: deleteConference
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of conference to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: conference deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    Conference:
      allOf:
        - $ref: '#/components/schemas/NewConference'
        - type: object
          required:
          - id
          properties:
            id:
              type: string
              format: uuid

    NewConference:
      type: object
      required:
        - name
        - url
        - description
        - theme
      properties:
        name:
          type: string
          example: 'Really Cool Conf 2023'
        theme:
          type: string
          example: 'Software Development'
        description:
          type: string
          example: 'The coolest software development conference at the North Pole! '
        url:
          type: string
          format: url
          pattern: '^(https:\/\/www\.|http:\/\/www\.|https:\/\/|http:\/\/)?[a-zA-Z]{2,}(\.[a-zA-Z]{2,})(\.[a-zA-Z]{2,})?\/[a-zA-Z0-9]{2,}|((https:\/\/www\.|http:\/\/www\.|https:\/\/|http:\/\/)?[a-zA-Z]{2,}(\.[a-zA-Z]{2,})(\.[a-zA-Z]{2,})?)|(https:\/\/www\.|http:\/\/www\.|https:\/\/|http:\/\/)?[a-zA-Z0-9]{2,}\.[a-zA-Z0-9]{2,}\.[a-zA-Z0-9]{2,}(\.[a-zA-Z0-9]{2,})?%'
          example: 'https://www.google.com'
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          example: 403
        message:
          type: string
