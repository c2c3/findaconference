/*
 * Find a Conference
 *
 * API for Find a Conference's conference database.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type Conference struct {

	Name string `json:"name"`

	Theme string `json:"theme"`

	Description string `json:"description"`

	Url string `json:"url"`

	StartDate string `json:"startDate,omitempty"`

	EndDate string `json:"endDate,omitempty"`

	Id string `json:"id"`
}

// AssertConferenceRequired checks if the required fields are not zero-ed
func AssertConferenceRequired(obj Conference) error {
	elements := map[string]interface{}{
		"name": obj.Name,
		"theme": obj.Theme,
		"description": obj.Description,
		"url": obj.Url,
		"id": obj.Id,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseConferenceRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Conference (e.g. [][]Conference), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseConferenceRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aConference, ok := obj.(Conference)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertConferenceRequired(aConference)
	})
}
